import random
from random import randint, randrange

import matplotlib as mpl
import matplotlib.pyplot as plt


class Population(list):
    'A collection of individuals'

    def __str__(self) -> str:
        output = "["
        len = self.__len__()
        for member_index in range(0, len):
            output = output + str(self.__getitem__(member_index)) + \
                ("" if member_index == (len-1) else ", ")
        output = output + "]"
        return output

    def __len__(self):
        return super().__len__()

    def __sum__(self):
        acc = 0
        len = self.__len__()
        for member_index in range(0, len):
            acc = acc + self.__getitem__(member_index).get_value()
        return acc


class Individual:
    'A member of a population'

    def __init__(self, _value):
        self.value = _value

    def get_value(self):
        'Get the score for this individual'
        return self.value if self.value % 2 == 0 else 0

    def crossover(self, other):
        # return Individual(((self.value - other.value) / 2) - 10)
        return Individual((self.value + other.value)/2)

    def mutation(self):
        self.value = self.value + random.randrange(-5, 5)

    def __truediv__(self, div):
        return self.value / div

    def __add__(self, other):
        return self.value + other

    def __str__(self):
        return str(self.value)

    def __int__(self):
        return self.value


data_points_max = list()
data_points_avg = list()

generation_limit = 1000
pop_size = 1000
mutation_rate = 5  # Percent
# Generate population
pop = Population()
for n in range(0, pop_size):
    pop.append(Individual(randrange(0, 100)))
# print(pop)

for generation in range(0, generation_limit+1):
    # Rank pop by score
    pop.sort(key=lambda i: i.get_value(), reverse=True)

    # Print highest score
    max = str(pop[0])
    avg = (pop.__sum__() / len(pop))
    print("Generation {}/{}\tHighest score {} \t Avg score {}".format(generation,
                                                                      generation_limit, max, avg))
    data_points_avg.append(avg)
    data_points_max.append(max)

    # Mate
    new_pop = Population()
    for p in [(0, 1), (2, 3)]:
        # Crossover
        new_pop1 = pop[p[0]].crossover(pop[p[1]])
        new_pop2 = pop[p[1]].crossover(pop[p[0]])

        # Mutation
        # new_pop1 = Individual(new_pop1 + random.randrange(-5,5))
        # new_pop2 = Individual(new_pop2 + random.randrange(-5,5))
        if (randint(0, 100) < mutation_rate):
            new_pop1.mutation()
        if (randint(0, 100) < mutation_rate):
            new_pop2.mutation()

        new_pop.append(new_pop1)
        new_pop.append(new_pop2)

    # print(new_pop)
    new_pop.extend(pop)
    pop = new_pop
    del pop[pop_size:]

    # print(str(pop))

pop.sort(key=lambda i: i.get_value(), reverse=True)
print("Final Population: ", str(pop))
print("Final Highest score {}".format(str(pop[0])))

fig, ax = plt.subplots()
# ax.plot(range(0, generation_limit+1),data_points_avg )
# ax.plot(range(0, generation_limit+1),data_points_max )
plt.ion()
plt.show()
